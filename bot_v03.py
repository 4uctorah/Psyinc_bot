import time

import openai
import telebot
from flask import Flask, request

import config
# Import the keyboard functions
from keyboards.inline import create_inline_keyboard
from keyboards.reply import create_reply_keyboard

app = Flask(__name__)

bot = telebot.TeleBot(config.TOKEN)

# Set up OpenAI API
openai.api_key = config.OPENAI_API_KEY

# Create an empty dictionary to store conversation history for each user
user_conversations = {}

welcome_text = (
    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n"
    "Psyinc ‚Äî —ç—Ç–æ –±–æ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–Ω–ª–∞–π–Ω-–ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å "
    "–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏, –ø–æ–∑–≤–æ–ª–∏—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å —á—É—Ç–∫–∏–º —Å–ª—É—à–∞–µ—Ç–µ–ª–µ–º, –∞ —Ç–∞–∫ –∂–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç "
    "–ø–æ–º–æ—â—å –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.\n\n"
    "–ê–≤—Ç–æ—Ä –±–æ—Ç–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ì—É—Ä—Ç–æ–ø–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥—ë—Ç –∫–∞–Ω–∞–ª <a href='https://t.me/+qyO1cAXLfgRhMTNi'>–ü–æ–¥ –∫–æ—Ä–æ–±–∫–æ–π</a>."
)


@bot.message_handler(commands=['start'])
def welcome(message):
    bot.send_message(message.chat.id, welcome_text, parse_mode='html')


@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = (
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/info –∏–ª–∏ /get_info - —É–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞\n"
        "/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –¥–∏–∞–ª–æ–≥\n"
        "/feedback - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞\n"
        "/settings - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
        "/about - —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö –±–æ—Ç–∞, –≤–µ—Ä—Å–∏–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
    )
    bot.send_message(message.chat.id, help_text)


@bot.message_handler(commands=['get_info', 'info'])
def get_info(message):
    markup_inline = create_inline_keyboard()
    bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö?', reply_markup=markup_inline)


@app.route(f'/{config.TOKEN}', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.get_json(force=True))
    bot.process_new_updates([update])
    return '', 200


@bot.callback_query_handler(func=lambda call: True)
def answer(call):
    if call.data == 'yes':
        markup_reply = create_reply_keyboard()
        bot.send_message(call.message.chat.id, '–ß–µ–º –≤–∞–º –ø–æ–º–æ—á—å?', reply_markup=markup_reply)
    elif call.data == 'no':
        bot.send_message(call.message.chat.id, "–¢–æ–≥–¥–∞, —Ö–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –¥–Ω—è! üòâ")


@bot.message_handler(content_types=['text'])
def get_text(message):
    if message.text == '–ú–Ω–µ –Ω—É–∂–µ–Ω —Å–ª—É—à–∞—Ç–µ–ª—å':
        bot.send_message(message.chat.id,
                         f'–£ –Ω–∞—Å –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏ —Å–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –≤–∞—à–∏—Ö –Ω—É–∂–¥. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π '
                         f'–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Å–ª—É—à–∞—Ç–µ–ª—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ @bugseekerok')
    elif message.text == '–ú–Ω–µ –Ω—É–∂–µ–Ω –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç':
        bot.send_message(message.chat.id, f'–£ –Ω–∞—Å –µ—Å—Ç—å –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å '
                                          f'–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å. –î–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥–∏ –∏–ª–∏ –¥–ª—è '
                                          f'–ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–∞–ø–∏—à–∏—Ç–µ @bugseekerok')
    elif message.text == '–°–∞–º–æ–ø–æ–º–æ—â—å':
        bot.send_message(message.chat.id, f'–ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?')
        bot.register_next_step_handler(message, send_to_chatgpt)
    else:
        bot.send_message(message.chat.id, f'–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å.. ')


@bot.message_handler(commands=['cancel'])
def cancel_command(message):
    bot.send_message(message.chat.id, "–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –≤–≤–µ–¥–∏—Ç–µ /help.")


@bot.message_handler(commands=['feedback'])
def feedback_command(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å:")
    bot.register_next_step_handler(message, process_feedback)


def process_feedback(message):
    feedback = message.text
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ñ–∞–π–ª –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")


@bot.message_handler(commands=['settings'])
def settings_command(message):
    bot.send_message(message.chat.id,
                     "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")


@bot.message_handler(commands=['about'])
def about_command(message):
    about_text = (
        "Psyinc ‚Äî —ç—Ç–æ –±–æ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–Ω–ª–∞–π–Ω-–ø–æ–¥–¥–µ—Ä–∂–∫–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–º –ì—É—Ä—Ç–æ–ø–æ–≤—ã–º.\n\n"
        "–ê–≤—Ç–æ—Ä –≤–µ–¥–µ—Ç –∫–∞–Ω–∞–ª <a href='https://t.me/+qyO1cAXLfgRhMTNi'>–ü–æ–¥ –∫–æ—Ä–æ–±–∫–æ–π</a>.\n\n"
        "–í–µ—Ä—Å–∏—è: 1.0\n"
        "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: [–≤–∞—à email –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏]"
    )


def send_to_chatgpt(message):
    user_input = message.text
    chat_id = message.chat.id

    # Retrieve the conversation history or initialize an empty history
    conversation_history = user_conversations.get(chat_id, "")

    # Update the conversation history with the user's input
    conversation_history += f"{user_input}\n"

    try:
        chatgpt_response = openai.Completion.create(
            engine="text-davinci-003",
            prompt=conversation_history,
            temperature=0.8,
            max_tokens=500,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )
    except Exception as e:
        bot.send_message(message.chat.id,
                         "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        print(f"Error: {e}")
        return

    response_text = chatgpt_response.choices[0].text.strip()

    # Update the conversation history with the assistant's response
    conversation_history += f"{response_text}\n"
    user_conversations[chat_id] = conversation_history

    bot.send_message(message.chat.id, response_text)
    # Register the next step handler to continue the conversation
    bot.register_next_step_handler(message, send_to_chatgpt)


# if __name__ == '__main__':
#     bot.remove_webhook()
#     time.sleep(1)  # –û–∂–∏–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω
#     bot.polling(none_stop=True)

if __name__ == '__main__':
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook(url='https://4uctorah.pythonanywhere.com/' + config.TOKEN)
#     bot.polling(none_stop=True)
#     app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
