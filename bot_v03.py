import os
import time
from datetime import datetime

import telebot
from telebot import types
from flask import Flask
import openai

# ------------------ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ------------------
from tgbot.config import load_config
config = load_config()

app = Flask(__name__)
bot = telebot.TeleBot(config.tg_bot.token)

# –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ polling (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ 409)
bot.remove_webhook()
time.sleep(1)

# OpenAI
openai.api_key = config.openai_api_key

# ------------- –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ----------
# history –¥–ª—è GPT-–¥–∏–∞–ª–æ–≥–∞
user_conversations: dict[int, list[dict]] = {}

# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: None | "self_help" | "listener" | "therapist"
user_state: dict[int, str] = {}

# –ê–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç (–æ–±–Ω–æ–≤–∏ –≤ .env –ø–æ—Å–ª–µ /getchatid –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ)
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))

# ------------------ –õ–æ–≥–∏ –∑–∞—è–≤–æ–∫ ------------------
LOG_FILE = "requests.log"
if not os.path.exists(LOG_FILE):
    with open(LOG_FILE, "w", encoding="utf-8") as f:
        f.write("=== –ñ—É—Ä–Ω–∞–ª –∑–∞—è–≤–æ–∫ ===\n\n")

def log_request(request_type: str, user):
    try:
        username = user.username or "–Ω–µ—Ç"
        full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = (
            f"[{timestamp}] "
            f"–¢–∏–ø: {request_type} | "
            f"–ò–º—è: {full_name} | "
            f"Username: @{username} | "
            f"Chat ID: {user.id}\n"
        )
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(log_entry)
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ª–æ–≥: {log_entry.strip()}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}")

# ------------------ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ------------------

def main_menu_kb() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # —Å–ª—É—à–∞—Ç–µ–ª—å + —Ç–µ—Ä–∞–ø–µ–≤—Ç ‚Äî –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    kb.row('–ú–Ω–µ –Ω—É–∂–µ–Ω —Å–ª—É—à–∞—Ç–µ–ª—å', '–ú–Ω–µ –Ω—É–∂–µ–Ω –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç')
    # —Å–∞–º–æ–ø–æ–º–æ—â—å ‚Äî —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
    kb.row('–°–∞–º–æ–ø–æ–º–æ—â—å')
    return kb

def exit_kb() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    kb.row('‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥')
    return kb

def remove_kb() -> types.ReplyKeyboardRemove:
    return types.ReplyKeyboardRemove()

# ------------------ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ ------------------
welcome_text = (
    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n"
    "Psyinc ‚Äî —ç—Ç–æ –±–æ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–Ω–ª–∞–π–Ω-–ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å "
    "–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏, –ø–æ–∑–≤–æ–ª–∏—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å —á—É—Ç–∫–∏–º —Å–ª—É—à–∞—Ç–µ–ª–µ–º, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç "
    "–ø–æ–º–æ—â—å –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.\n\n"
    "–ê–≤—Ç–æ—Ä –±–æ—Ç–∞ ‚Äî –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ì—É—Ä—Ç–æ–ø–æ–≤, –≤–µ–¥—É—â–∏–π –∫–∞–Ω–∞–ª–∞ "
    "<a href='https://t.me/+qyO1cAXLfgRhMTNi'>–ü–æ–¥ –∫–æ—Ä–æ–±–∫–æ–π</a>."
)

# ------------------ –ö–æ–º–∞–Ω–¥—ã ------------------
@bot.message_handler(commands=['start'])
def cmd_start(message):
    chat_id = message.chat.id
    user_conversations[chat_id] = []
    user_state.pop(chat_id, None)
    bot.send_message(chat_id, welcome_text, parse_mode='html', reply_markup=main_menu_kb())

@bot.message_handler(commands=['help'])
def cmd_help(message):
    help_text = (
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/info –∏–ª–∏ /get_info ‚Äî —É–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "/cancel ‚Äî –≤—ã–π—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞\n"
        "/feedback ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n"
        "/settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/about ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏"
    )
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['about'])
def cmd_about(message):
    about_text = (
        "Psyinc ‚Äî –±–æ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"
        "–í–µ—Ä—Å–∏—è: 1.0-beta\n"
        "–ê–≤—Ç–æ—Ä: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ì—É—Ä—Ç–æ–ø–æ–≤ (@bugseekerok)\n"
        "–ö–∞–Ω–∞–ª: <a href='https://t.me/+qyO1cAXLfgRhMTNi'>–ü–æ–¥ –∫–æ—Ä–æ–±–∫–æ–π</a>"
    )
    bot.send_message(message.chat.id, about_text, parse_mode='html')

@bot.message_handler(commands=['reset'])
def cmd_reset(message):
    user_conversations[message.chat.id] = []
    bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")

@bot.message_handler(commands=['cancel'])
def cmd_cancel(message):
    # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥
    chat_id = message.chat.id
    user_state.pop(chat_id, None)
    bot.send_message(chat_id, "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ß–µ–º –µ—â—ë –ø–æ–º–æ—á—å?", reply_markup=main_menu_kb())

@bot.message_handler(commands=['feedback'])
def cmd_feedback(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤:")
    bot.register_next_step_handler(message, process_feedback)

def process_feedback(message):
    # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!", reply_markup=main_menu_kb())

@bot.message_handler(commands=['settings'])
def cmd_settings(message):
    bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã.")

# –ö–æ–º–∞–Ω–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å chat_id —á–∞—Ç–∞ (–∑–∞–ø—É—Å—Ç–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —á–∞—Ç–µ)
@bot.message_handler(commands=['getchatid'])
def cmd_getchatid(message):
    bot.reply_to(message, f"Chat ID: {message.chat.id}")

# ------------------ /info —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ ------------------
@bot.message_handler(commands=['get_info', 'info'])
def cmd_get_info(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–î–∞", callback_data="info_yes"),
        types.InlineKeyboardButton("–ù–µ—Ç", callback_data="info_no"),
    )
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö?", reply_markup=markup)

# ------------------ –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–∂–∏–º–æ–≤ ------------------

def start_listener_or_therapist(kind: str, message):
    """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ 'listener' –∏–ª–∏ 'therapist' –∏ –ø–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞—è–≤–∫–∞ –∞–¥–º–∏–Ω—É."""
    chat_id = message.chat.id
    username = message.from_user.username or None
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""
    full_name = f"{first_name} {last_name}".strip()

    kind_label = "—Å–ª—É—à–∞—Ç–µ–ª—è" if kind == "listener" else "–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∞"

    # –ª–æ–≥ –∑–∞—è–≤–∫–∏
    log_request(kind_label, message.from_user)

    request_text = (
        f"üì© <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ {kind_label}</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name}\n"
        f"üí¨ Username: @{username if username else '–Ω–µ—Ç'}\n"
        f"üÜî Chat ID: <code>{chat_id}</code>\n"
        f"üïì –í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}"
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(
        text="üîÅ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"reply_{chat_id}"
    ))

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    bot.send_message(ADMIN_CHAT_ID, request_text, parse_mode='HTML', reply_markup=markup)

    # –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –∏ –¥–∞—ë–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_state[chat_id] = kind
    bot.send_message(
        chat_id,
        "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –¥–µ—Ç–∞–ª–∏/–≤–æ–ø—Ä–æ—Å ‚Äî —è –±—É–¥—É –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.\n"
        "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=exit_kb()
    )

def forward_user_note_to_admin(kind: str, message):
    """–õ—é–±–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ listener/therapist ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ."""
    username = message.from_user.username or "–Ω–µ—Ç"
    full_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
    kind_label = "—Å–ª—É—à–∞—Ç–µ–ª—è" if kind == "listener" else "–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∞"

    note = (
        f"üß© <b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ ({kind_label})</b>\n\n"
        f"üë§ {full_name} (@{username})\n"
        f"üÜî <code>{message.chat.id}</code>\n"
        f"üí¨ –¢–µ–∫—Å—Ç:\n{message.text}"
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="üîÅ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"reply_{message.chat.id}"))
    bot.send_message(ADMIN_CHAT_ID, note, parse_mode='HTML', reply_markup=markup)

# ------------------ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ------------------
@bot.message_handler(content_types=['text'])
def on_text(message):
    text = message.text.strip()
    chat_id = message.chat.id

    # –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ ‚Äî –ø—É—Å—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –∫–æ–º–∞–Ω–¥–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
    if text.startswith('/'):
        return

    # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
    if text == '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥':
        return cmd_cancel(message)

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
    state = user_state.get(chat_id)
    if state == "self_help":
        return handle_self_help_message(message)
    if state == "listener":
        forward_user_note_to_admin("listener", message)
        bot.send_message(chat_id, "üì® –ü–µ—Ä–µ–¥–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. –ü–∏—à–∏—Ç–µ –¥–∞–ª—å—à–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥¬ª.",
                         reply_markup=exit_kb())
        return
    if state == "therapist":
        forward_user_note_to_admin("therapist", message)
        bot.send_message(chat_id, "üì® –ü–µ—Ä–µ–¥–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. –ü–∏—à–∏—Ç–µ –¥–∞–ª—å—à–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥¬ª.",
                         reply_markup=exit_kb())
        return

    # –∑–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
    if text == '–ú–Ω–µ –Ω—É–∂–µ–Ω —Å–ª—É—à–∞—Ç–µ–ª—å':
        return start_listener_or_therapist("listener", message)

    if text == '–ú–Ω–µ –Ω—É–∂–µ–Ω –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç':
        return start_listener_or_therapist("therapist", message)

    if text == '–°–∞–º–æ–ø–æ–º–æ—â—å':
        user_state[chat_id] = "self_help"
        bot.send_message(chat_id, "–ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç? –ü–∏—à–∏—Ç–µ ‚Äî —è –æ—Ç–≤–µ—á—É. –ù–∞–∂–º–∏—Ç–µ ¬´‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥¬ª, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.",
                         reply_markup=exit_kb())
        return

    # –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    bot.send_message(chat_id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å..', reply_markup=main_menu_kb())

# ------------------ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ------------------

@bot.callback_query_handler(func=lambda call: call.data.startswith('reply_'))
def cb_reply_user(call):
    try:
        user_id = call.data.split('_')[1]
        bot.send_message(call.message.chat.id, f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (chat_id: {user_id})")
        bot.register_next_step_handler(call.message, lambda msg: forward_admin_reply(msg, user_id))
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

def forward_admin_reply(message, user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É"""
    try:
        bot.send_message(
            int(user_id),
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{message.text}",
            parse_mode='HTML',
            reply_markup=exit_kb()
        )
        bot.send_message(message.chat.id, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ({user_id})")
        if message.chat.id != ADMIN_CHAT_ID:
            bot.send_message(ADMIN_CHAT_ID, f"üì® –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code> ‚úÖ", parse_mode='HTML')
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

# ------------------ –ò–Ω–ª–∞–π–Ω-–æ—Ç–≤–µ—Ç –Ω–∞ /info ------------------

@bot.callback_query_handler(func=lambda call: call.data in ('info_yes', 'info_no'))
def cb_info(call):
    if call.data == 'info_yes':
        bot.send_message(call.message.chat.id, "–ß–µ–º –≤–∞–º –ø–æ–º–æ—á—å?", reply_markup=main_menu_kb())
    else:
        bot.send_message(call.message.chat.id, "–¢–æ–≥–¥–∞, —Ö–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –¥–Ω—è! üòâ", reply_markup=main_menu_kb())

# ------------------ OpenAI (–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥) ------------------

def handle_self_help_message(message):
    """–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –°–∞–º–æ–ø–æ–º–æ—â–∏ –∏–¥—É—Ç –≤ GPT; –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –≤–∏–¥–Ω–∞ –≤—Å–µ–≥–¥–∞."""
    chat_id = message.chat.id
    history = user_conversations.setdefault(chat_id, [])
    history.append({"role": "user", "content": message.text})

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=history,
            temperature=0.8,
            max_tokens=500
        )
        answer = response['choices'][0]['message']['content'].strip()
        history.append({"role": "assistant", "content": answer})
        bot.send_message(chat_id, answer, reply_markup=exit_kb())
    except Exception as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}", reply_markup=exit_kb())

# ------------------ –ó–∞–ø—É—Å–∫ ------------------
if __name__ == '__main__':
    bot.polling(none_stop=True)
