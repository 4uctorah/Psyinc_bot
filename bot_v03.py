import os
import time
from datetime import datetime

import telebot
from telebot import types
from flask import Flask
import openai

# ------------------ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ------------------
from tgbot.config import load_config
config = load_config()

app = Flask(__name__)
bot = telebot.TeleBot(config.tg_bot.token)

# –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ polling (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ 409)
bot.remove_webhook()
time.sleep(1)

# OpenAI
openai.api_key = config.openai_api_key

# –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤
user_conversations = {}

# –ê–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç (–æ–±–Ω–æ–≤–∏ –≤ .env –ø–æ—Å–ª–µ /getchatid –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ)
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))

# ------------------ –õ–æ–≥–∏ –∑–∞—è–≤–æ–∫ ------------------
LOG_FILE = "requests.log"
if not os.path.exists(LOG_FILE):
    with open(LOG_FILE, "w", encoding="utf-8") as f:
        f.write("=== –ñ—É—Ä–Ω–∞–ª –∑–∞—è–≤–æ–∫ ===\n\n")

def log_request(request_type: str, user):
    try:
        username = user.username or "–Ω–µ—Ç"
        full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = (
            f"[{timestamp}] "
            f"–¢–∏–ø: {request_type} | "
            f"–ò–º—è: {full_name} | "
            f"Username: @{username} | "
            f"Chat ID: {user.id}\n"
        )
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(log_entry)
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ª–æ–≥: {log_entry.strip()}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}")

# ------------------ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ ------------------
welcome_text = (
    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n"
    "Psyinc ‚Äî —ç—Ç–æ –±–æ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–Ω–ª–∞–π–Ω-–ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å "
    "–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏, –ø–æ–∑–≤–æ–ª–∏—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å —á—É—Ç–∫–∏–º —Å–ª—É—à–∞—Ç–µ–ª–µ–º, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç "
    "–ø–æ–º–æ—â—å –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.\n\n"
    "–ê–≤—Ç–æ—Ä –±–æ—Ç–∞ ‚Äî –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ì—É—Ä—Ç–æ–ø–æ–≤, –≤–µ–¥—É—â–∏–π –∫–∞–Ω–∞–ª–∞ "
    "<a href='https://t.me/+qyO1cAXLfgRhMTNi'>–ü–æ–¥ –∫–æ—Ä–æ–±–∫–æ–π</a>."
)

# ------------------ –ö–æ–º–∞–Ω–¥—ã ------------------
@bot.message_handler(commands=['start'])
def cmd_start(message):
    chat_id = message.chat.id
    user_conversations[chat_id] = []
    bot.send_message(chat_id, welcome_text, parse_mode='html')

@bot.message_handler(commands=['help'])
def cmd_help(message):
    help_text = (
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/info –∏–ª–∏ /get_info ‚Äî —É–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/feedback ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n"
        "/settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/about ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏"
    )
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['about'])
def cmd_about(message):
    about_text = (
        "Psyinc ‚Äî –±–æ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"
        "–í–µ—Ä—Å–∏—è: 1.0-beta\n"
        "–ê–≤—Ç–æ—Ä: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ì—É—Ä—Ç–æ–ø–æ–≤ (@bugseekerok)\n"
        "–ö–∞–Ω–∞–ª: <a href='https://t.me/+qyO1cAXLfgRhMTNi'>–ü–æ–¥ –∫–æ—Ä–æ–±–∫–æ–π</a>"
    )
    bot.send_message(message.chat.id, about_text, parse_mode='html')

@bot.message_handler(commands=['reset'])
def cmd_reset(message):
    user_conversations[message.chat.id] = []
    bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")

@bot.message_handler(commands=['cancel'])
def cmd_cancel(message):
    bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")

@bot.message_handler(commands=['feedback'])
def cmd_feedback(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤:")
    bot.register_next_step_handler(message, process_feedback)

def process_feedback(message):
    # –ó–¥–µ—Å—å –º–æ–∂–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")

@bot.message_handler(commands=['settings'])
def cmd_settings(message):
    bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã.")

# –ö–æ–º–∞–Ω–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å chat_id —á–∞—Ç–∞ (–∑–∞–ø—É—Å—Ç–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —á–∞—Ç–µ)
@bot.message_handler(commands=['getchatid'])
def cmd_getchatid(message):
    bot.reply_to(message, f"Chat ID: {message.chat.id}")

# ------------------ /info —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ ------------------
# –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Ñ–∞–±—Ä–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä ‚Äî –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∏—Ö.
# –ù–∏–∂–µ ‚Äî –ø—Ä–æ—Å—Ç–æ–π –∏–Ω–ª–∞–π–Ω-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å yes/no.
@bot.message_handler(commands=['get_info', 'info'])
def cmd_get_info(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–î–∞", callback_data="info_yes"),
        types.InlineKeyboardButton("–ù–µ—Ç", callback_data="info_no"),
    )
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö?", reply_markup=markup)

# ------------------ –ö–æ–Ω—Ç–µ–Ω—Ç: —Ç–µ–∫—Å—Ç (–ù–ï –ö–û–ú–ê–ù–î–´) ------------------
@bot.message_handler(content_types=['text'])
def on_text(message):
    # 1) –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '/'), –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å,
    #    —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–±–∏–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã.
    if message.text.startswith('/'):
        return

    # 2) –û—Å–Ω–æ–≤–Ω—ã–µ –≤–µ—Ç–∫–∏
    if message.text == '–ú–Ω–µ –Ω—É–∂–µ–Ω —Å–ª—É—à–∞—Ç–µ–ª—å':
        log_request("—Å–ª—É—à–∞—Ç–µ–ª—å", message.from_user)

        chat_id = message.chat.id
        username = message.from_user.username or None
        first_name = message.from_user.first_name or ""
        last_name = message.from_user.last_name or ""
        full_name = f"{first_name} {last_name}".strip()

        request_text = (
            f"üì© <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–ª—É—à–∞—Ç–µ–ª—è</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name}\n"
            f"üí¨ Username: @{username if username else '–Ω–µ—Ç'}\n"
            f"üÜî Chat ID: <code>{chat_id}</code>\n"
            f"üïì –í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}"
        )

        # –ö–Ω–æ–ø–∫–∞: –∞–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            text="üîÅ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"reply_{chat_id}"
        ))

        try:
            bot.send_message(ADMIN_CHAT_ID, request_text, parse_mode='HTML', reply_markup=markup)
            bot.send_message(chat_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        except Exception as e:
            bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")

    elif message.text == '–ú–Ω–µ –Ω—É–∂–µ–Ω –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç':
        log_request("–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç", message.from_user)

        chat_id = message.chat.id
        username = message.from_user.username or None
        first_name = message.from_user.first_name or ""
        last_name = message.from_user.last_name or ""
        full_name = f"{first_name} {last_name}".strip()

        request_text = (
            f"üì© <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∞</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name}\n"
            f"üí¨ Username: @{username if username else '–Ω–µ—Ç'}\n"
            f"üÜî Chat ID: <code>{chat_id}</code>\n"
            f"üïì –í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}"
        )

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            text="üîÅ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"reply_{chat_id}"
        ))

        try:
            bot.send_message(ADMIN_CHAT_ID, request_text, parse_mode='HTML', reply_markup=markup)
            bot.send_message(chat_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        except Exception as e:
            bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")

    elif message.text == '–°–∞–º–æ–ø–æ–º–æ—â—å':
        bot.send_message(message.chat.id, '–ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?')
        bot.register_next_step_handler(message, send_to_chatgpt)

    else:
        bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å..')

# ------------------ Callback'–∏ ------------------

# 1) –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∫–Ω–æ–ø–∫–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —á–∞—Ç–µ)
@bot.callback_query_handler(func=lambda call: call.data.startswith('reply_'))
def cb_reply_user(call):
    try:
        user_id = call.data.split('_')[1]
        bot.send_message(call.message.chat.id, f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (chat_id: {user_id})")
        bot.register_next_step_handler(call.message, lambda msg: forward_admin_reply(msg, user_id))
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

def forward_admin_reply(message, user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É"""
    try:
        bot.send_message(
            int(user_id),
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{message.text}",
            parse_mode='HTML'
        )
        bot.send_message(message.chat.id, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ({user_id})")
        # –¥—É–±–ª–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        if message.chat.id != ADMIN_CHAT_ID:
            bot.send_message(ADMIN_CHAT_ID, f"üì® –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code> ‚úÖ", parse_mode='HTML')
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

# 2) –ò–Ω–ª–∞–π–Ω ¬´–î–∞/–ù–µ—Ç¬ª –∏–∑ /info
@bot.callback_query_handler(func=lambda call: call.data in ('info_yes', 'info_no'))
def cb_info(call):
    if call.data == 'info_yes':
        # –ü–æ–∫–∞–∂–µ–º —Ä–µ–ø–ª–∞–π-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≥–æ—Ç–æ–≤–∞—è —Ñ–∞–±—Ä–∏–∫–∞, –ø–æ–¥–∫–ª—é—á–∏ –µ—ë)
        # –ù–∏–∂–µ –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.row('–ú–Ω–µ –Ω—É–∂–µ–Ω —Å–ª—É—à–∞—Ç–µ–ª—å') 
        kb.row('–ú–Ω–µ –Ω—É–∂–µ–Ω –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç')
        kb.row('–°–∞–º–æ–ø–æ–º–æ—â—å')
        bot.send_message(call.message.chat.id, "–ß–µ–º –≤–∞–º –ø–æ–º–æ—á—å?", reply_markup=kb)
    else:
        bot.send_message(call.message.chat.id, "–¢–æ–≥–¥–∞, —Ö–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –¥–Ω—è! üòâ")

# ------------------ OpenAI ------------------
def send_to_chatgpt(message):
    chat_id = message.chat.id
    question = message.text

    if chat_id not in user_conversations:
        user_conversations[chat_id] = []

    conversation_history = user_conversations[chat_id]
    conversation_history.append({"role": "user", "content": question})

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",   # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –ø–æ–º–µ–Ω—è–µ—à—å –Ω–∞ 4o/4.1 –∏ —Ç.–¥.
            messages=conversation_history,
            temperature=0.8,
            max_tokens=500
        )
        answer = response['choices'][0]['message']['content'].strip()
        conversation_history.append({"role": "assistant", "content": answer})
        user_conversations[chat_id] = conversation_history
        bot.send_message(chat_id, answer)
    except Exception as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")

# ------------------ –ó–∞–ø—É—Å–∫ ------------------
if __name__ == '__main__':
    bot.polling(none_stop=True)
