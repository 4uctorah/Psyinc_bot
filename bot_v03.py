import openai
import telebot
import config
from telebot import types

# Import the keyboard functions
from keyboards.inline import create_inline_keyboard
from keyboards.reply import create_reply_keyboard
from flask import Flask, request

app = Flask(__name__)

bot = telebot.TeleBot(config.TOKEN)

# Set up OpenAI API
openai.api_key = config.OPENAI_API_KEY

# Create an empty dictionary to store conversation history for each user
user_conversations = {}

welcome_text = (
    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n"
    "Psyinc ‚Äî —ç—Ç–æ –±–æ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–Ω–ª–∞–π–Ω-–ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å "
    "–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏, –ø–æ–∑–≤–æ–ª–∏—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å —á—É—Ç–∫–∏–º —Å–ª—É—à–∞–µ—Ç–µ–ª–µ–º, –∞ —Ç–∞–∫ –∂–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç "
    "–ø–æ–º–æ—â—å –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.\n\n"
    "–ê–≤—Ç–æ—Ä –±–æ—Ç–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ì—É—Ä—Ç–æ–ø–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥—ë—Ç –∫–∞–Ω–∞–ª <a href='https://t.me/+qyO1cAXLfgRhMTNi'>–ü–æ–¥ –∫–æ—Ä–æ–±–∫–æ–π</a>."
)


@bot.message_handler(commands=['start'])
def welcome(message):
    bot.send_message(message.chat.id, welcome_text, parse_mode='html')


@bot.message_handler(commands=['get_info', 'info'])
def get_info(message):
    markup_inline = create_inline_keyboard()
    bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö?', reply_markup=markup_inline)


@app.route('/5006443958:AAEQaNc1K-WQG2OCT0e72HuZxNtp2UpJEY0', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.get_json(force=True))
    bot.process_new_updates([update])
    return '', 200


@bot.callback_query_handler(func=lambda call: True)
def answer(call):
    if call.data == 'yes':
        markup_reply = create_reply_keyboard()
        bot.send_message(call.message.chat.id, '–ß–µ–º –≤–∞–º –ø–æ–º–æ—á—å?', reply_markup=markup_reply)
    elif call.data == 'no':
        bot.send_message(call.message.chat.id, "–¢–æ–≥–¥–∞, —Ö–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –¥–Ω—è! üòâ")


@bot.message_handler(content_types=['text'])
def get_text(message):
    if message.text == '–ú–Ω–µ –Ω—É–∂–µ–Ω —Å–ª—É—à–∞—Ç–µ–ª—å':
        bot.send_message(message.chat.id, f'–ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ —Å–ª—É—à–∞—Ç–µ–ª—è: ')
    elif message.text == '–ú–Ω–µ –Ω—É–∂–µ–Ω –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç':
        bot.send_message(message.chat.id, f'–ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: ')
    elif message.text == '–°–∞–º–æ–ø–æ–º–æ—â—å':
        bot.send_message(message.chat.id, f'–ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?')
        bot.register_next_step_handler(message, send_to_chatgpt)
    else:
        bot.send_message(message.chat.id, f'–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å.. ')


def send_to_chatgpt(message):
    user_input = message.text
    chat_id = message.chat.id

    # Retrieve the conversation history or initialize an empty history
    conversation_history = user_conversations.get(chat_id, "")

    # Update the conversation history with the user's input
    conversation_history += f"User: {user_input}\nAssistant:"

    chatgpt_response = openai.Completion.create(
        engine="text-davinci-003",
        prompt=conversation_history,
        temperature=0.8,
        max_tokens=500,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )

    response_text = chatgpt_response.choices[0].text.strip()

    # Update the conversation history with the assistant's response
    conversation_history += f" {response_text}\n"
    user_conversations[chat_id] = conversation_history

    bot.send_message(message.chat.id, response_text)
    # Register the next step handler to continue the conversation
    bot.register_next_step_handler(message, send_to_chatgpt)


# bot.polling(none_stop=True)

if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(url='https://4uctorah.pythonanywhere.com/5006443958:AAEQaNc1K-WQG2OCT0e72HuZxNtp2UpJEY0')
    app.run()
